;(function() {
  var curColourIndex = 1, maxColourIndex = 24, nextColour = function() {
    var R,G,B;
    R = parseInt(128+Math.sin((curColourIndex*3+0)*1.3)*128);
    G = parseInt(128+Math.sin((curColourIndex*3+1)*1.3)*128);
    B = parseInt(128+Math.sin((curColourIndex*3+2)*1.3)*128);
    curColourIndex = curColourIndex + 1;
    if (curColourIndex > maxColourIndex) curColourIndex = 1;
    return "rgb(" + R + "," + G + "," + B + ")";
  };
    
  window.jsPlumbDemo = { 
    init :function() {
      jsPlumb.importDefaults({
        Endpoint : ["Dot", {radius:2}],
        HoverPaintStyle : {strokeStyle:"#42a62c", lineWidth:2 },
        ConnectionOverlays : [
          [ "Arrow", { 
            location:1,
            id:"arrow",
            length:14,
            foldback:0.8
          } ],
          [ "Label", { label:"10/10", id:"label" }]
        ]
      });

      // initialise draggable elements.  note: jsPlumb does not do this by default from version 1.3.4 onwards.
      // jsPlumb.draggable(jsPlumb.getSelector(".w"));

      jsPlumb.bind("click", function(c) { 
        $.ajax({type: 'GET', 
          url: "<%= Rails.application.routes.url_helpers.find_by_nodes_connections_path(:format => :js) %>", 
          data: { source_id: c.sourceId, target_id: c.targetId}, dataType: 'text', 
          async: false, success: function(data) {
            $('#connection_form').html(data);
            
            $('#connection_form').modal();

            $('#connection_form').on('submit', function() { 
              $('#connection_form').modal('hide');
    
              c.getOverlay('label').
                setLabel($('[name="connection[capacity]"]').val() + '/' + $('[name="connection[cost]"]').val());
            });
          }
        });
      });

      // bind a contextmenu listener to each connection; the connection is deleted.
      jsPlumb.bind("contextmenu", function(c) { 
        if(confirm('При нажатии на "Ok" данная связь удалится. Нажмите на "Cancel", чтобы отменить.')) {
          $.get("<%= Rails.application.routes.url_helpers.delete_by_nodes_connections_path(:format => :js) %>",
            { source_id: c.sourceId, target_id: c.targetId }, function(data) {
              if (data == 'success') {
                jsPlumb.detach(c);
              }
            }, 'text'
          );
        }    
      });

      // hand off to the library specific demo code here.  not my ideal, but to write common code
      // is less helpful for everyone, because all developers just like to copy stuff, right?
      // make each ".ep" div a source and give it some parameters to work with.  here we tell it
      // to use a Continuous anchor and the StateMachine connectors, and also we give it the
      // connector's paint style.  note that in this demo the strokeStyle is dynamically generated,
      // which prevents us from just setting a jsPlumb.Defaults.PaintStyle.  but that is what i
      // would recommend you do.
      jsPlumbDemo.initEndpoints(nextColour);

      jsPlumb.bind("jsPlumbConnection", function(conn) {
        conn.connection.setPaintStyle({strokeStyle:nextColour()});
        conn.connection.getOverlay("label").setLabel('10/10');
      });

      jsPlumb.bind("beforeDrop", function(conn) {
        var responce;  

        $.ajax({ type: 'POST', url: "<%= Rails.application.routes.url_helpers.connections_path(:format => :js) %>", 
          data: {
            connection: { source_id: conn.sourceId, target_id: conn.targetId }
          },
          dataType: 'text', 
          async: false,
          success: function(data) {
            responce = data;
          }
        });

        return (responce == 'success') ? true : false;
      });

      jsPlumb.makeTarget(jsPlumb.getSelector(".w"), {
        dropOptions:{ hoverClass:"dragHover" },
        anchor:"Continuous"
        //anchor:"TopCenter"      
      });
    }
  };
})();

;(function() {
  jsPlumbDemo.initEndpoints = function(nextColour) {
    $(".ep").each(function(i,e) {
    var p = $(e).parent();
    jsPlumb.makeSource($(e), {
      parent:p,
      //anchor:"BottomCenter",
      anchor:"Continuous",
      connector:[ "StateMachine", { curviness:20 } ],
      connectorStyle:{ strokeStyle:nextColour(), lineWidth:2 },
      maxConnections:10,
      onMaxConnections:function(info, e) {
        alert("Maximum connections (" + info.maxConnections + ") reached");
      }
    });
    });   
  };
})();

;(function() {

  var entries = [
    { id:"stateMachineDemo", name:"State Machine", about:"Demonstration of the State Machine Connectors and Continuous Anchors" },
  ],
  libraries = [
    {id:"jquery", name:"jQuery"},
  ],
  prepareOtherLibraryString = function(demoId, library) {
    var s = "", demoInfo = jsPlumb.DemoList.find(demoId);
    for (var i = 0; i < libraries.length; i++) {
      var c = libraries[i].id == library ? "selected" : "";
      s += '<a class="' + c + '" href="../' + libraries[i].id + '/' + demoId + '.html">' + libraries[i].name + '</a>&nbsp;&nbsp;';
    }
    return s;
  },
  demoSelectorString = (function() {
    var s = '<h5>Select Demo:</h5><select id="demoSelector" class="demoSelector">';
    for (var i = 0; i < entries.length; i++) {
      s += '<option value="' + entries[i].id + '.html">' + entries[i].name + '</option>';
    }
    s += '</select>';
    return s;
  })();
  
  
  jsPlumb.DemoList = {
    find:function(id) {
      for (var i = 0; i < entries.length; i++) {
        if (entries[i].id === id) {
          var next = i < entries.length - 1 ? i + 1 : 0,
            prev = i > 0 ? i - 1 : entries.length - 1;
            
          return {
            current:entries[i],
            prev:entries[prev],
            next:entries[next],
            idx:i
          };
        }
      }
    },
    init : function() {
      var bod = document.body,
        demoId = bod.getAttribute("data-demo-id"),
        library = bod.getAttribute("data-library"),
        renderModeString = '<h5>Render Mode:</h5><a href="#" class="rmode" mode="svg">SVG</a>&nbsp;|&nbsp;<a href="#" class="selected rmode" mode="canvas">Canvas</a>&nbsp;|&nbsp;<a href="#" class="rmode" mode="vml">VML</a>',
        libraryString = '<h5>Library:</h5><div class="otherLibraries"></div>' + prepareOtherLibraryString(demoId, library),
        demoInfo = jsPlumb.DemoList.find(demoId);
    }
  };
})();

/*
 *  This file contains the JS that handles the first init of each jQuery demonstration, and also switching
 *  between render modes.
 */
jsPlumb.bind("ready", function() {
  jsPlumb.DemoList.init();

  // chrome fix.
  document.onselectstart = function () { return false; };       

    // render mode
  var resetRenderMode = function(desiredMode) {
    var newMode = jsPlumb.setRenderMode(desiredMode);
    $(".rmode").removeClass("selected");
    $(".rmode[mode='" + newMode + "']").addClass("selected");   

    $(".rmode[mode='canvas']").attr("disabled", !jsPlumb.isCanvasAvailable());
    $(".rmode[mode='svg']").attr("disabled", !jsPlumb.isSVGAvailable());
    $(".rmode[mode='vml']").attr("disabled", !jsPlumb.isVMLAvailable());

    //var disableList = (newMode === jsPlumb.VML) ? ",.rmode[mode='svg']" : ".rmode[mode='vml']"; 
    //$(disableList).attr("disabled", true);        
    jsPlumbDemo.init();
  };
     
  $(".rmode").bind("click", function() {
    var desiredMode = $(this).attr("mode");
    if (jsPlumbDemo.reset) jsPlumbDemo.reset();
    jsPlumb.reset();
    resetRenderMode(desiredMode);         
  });
  
  resetRenderMode(jsPlumb.SVG);
});
